
#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыполнитьЗаменуШтрихкодовАналоговБезОстатка() Экспорт
	
	Запрос = ПолучитьЗапросШтрихкодовАналоговБезОстатка();
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Пока Не РезультатЗапроса.Пустой() Цикл
		
		ЗаменитьШтрихкодыАналоговБезОстатка(РезультатЗапроса);
		
		//@skip-check query-in-loop
		РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьЗапросШтрихкодовАналоговБезОстатка()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	уатАналоги.Номенклатура КАК Номенклатура,
		|	уатАналоги.Аналог КАК Аналог,
		|	СУММА(ЕСТЬNULL(ОстаткиНаСкладах.КоличествоОстаток, 0)) КАК Остаток
		|ПОМЕСТИТЬ втОстаткиАналогов
		|ИЗ
		|	РегистрСведений.уатАналоги КАК уатАналоги
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатПартииТоваровНаСкладах.Остатки КАК ОстаткиНаСкладах
		|		ПО уатАналоги.Аналог = ОстаткиНаСкладах.Номенклатура
		|		И ОстаткиНаСкладах.КоличествоОстаток > 0
		|СГРУППИРОВАТЬ ПО
		|	уатАналоги.Номенклатура,
		|	уатАналоги.Аналог
		|ИМЕЮЩИЕ
		|	СУММА(ЕСТЬNULL(ОстаткиНаСкладах.КоличествоОстаток, 0)) = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	втОстаткиАналогов.Номенклатура КАК Номенклатура,
		|	втОстаткиАналогов.Аналог КАК Аналог,
		|	уатШтрихкоды.Штрихкод КАК Штрихкод,
		|	уатШтрихкоды.ТипШтрихкода КАК ТипШтрихкода,
		|	уатШтрихкоды.ЗаказГрузоотправителя,
		|	уатШтрихкоды.НомерПаллеты,
		|	уатШтрихкоды.НомерСтрокиЗаказа
		|ПОМЕСТИТЬ втОстаткиАналоговСШтрихкодами
		|ИЗ
		|	втОстаткиАналогов КАК втОстаткиАналогов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатШтрихкоды КАК уатШтрихкоды
		|		ПО втОстаткиАналогов.Аналог = уатШтрихкоды.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втОстаткиАналогов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОстаткиАналоговСШтрихкодами.Номенклатура КАК Номенклатура,
		|	втОстаткиАналоговСШтрихкодами.Аналог КАК Аналог,
		|	втОстаткиАналоговСШтрихкодами.Штрихкод КАК Штрихкод,
		|	втОстаткиАналоговСШтрихкодами.ТипШтрихкода КАК ТипШтрихкода,
		|	втОстаткиАналоговСШтрихкодами.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
		|	втОстаткиАналоговСШтрихкодами.НомерПаллеты КАК НомерПаллеты,
		|	втОстаткиАналоговСШтрихкодами.НомерСтрокиЗаказа КАК НомерСтрокиЗаказа,
		|	ВЫБОР
		|		КОГДА НЕ уатШтрихкоды.Объект ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ШтрихкодОсновнойНоменклатурыЗаписан
		|ИЗ
		|	втОстаткиАналоговСШтрихкодами КАК втОстаткиАналоговСШтрихкодами
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатШтрихкоды КАК уатШтрихкоды
		|		ПО втОстаткиАналоговСШтрихкодами.Номенклатура = уатШтрихкоды.Объект
		|		И втОстаткиАналоговСШтрихкодами.Штрихкод = уатШтрихкоды.Штрихкод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втОстаткиАналоговСШтрихкодами";
		
	Возврат Запрос;
	
КонецФункции

Процедура ЗаменитьШтрихкодыАналоговБезОстатка(РезультатЗапроса)
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
	    ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.уатШтрихкоды");
	    ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	    ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	    ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Штрихкод", "Штрихкод");
	    ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Объект", "Номенклатура");
	    
	    ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.уатШтрихкоды");
	    ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	    ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	    ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Штрихкод", "Штрихкод");
	    ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Объект", "Аналог");
	    
	    Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Не Выборка.ШтрихкодОсновнойНоменклатурыЗаписан Тогда
				
				Запись = РегистрыСведений.уатШтрихкоды.СоздатьМенеджерЗаписи();
				
				Запись.Объект = Выборка.Номенклатура;
				Запись.Штрихкод = Выборка.Штрихкод;
				Запись.ТипШтрихкода = Выборка.ТипШтрихкода;
				Запись.ЗаказГрузоотправителя = Выборка.ЗаказГрузоотправителя;
				Запись.НомерСтрокиЗаказа = Выборка.НомерСтрокиЗаказа;
				Запись.НомерПаллеты = Выборка.НомерПаллеты;
				
				Запись.Записать(Истина);
				
			КонецЕсли;
			
			Запись = РегистрыСведений.уатШтрихкоды.СоздатьМенеджерЗаписи();
			
			Запись.Объект = Выборка.Аналог;
			Запись.Штрихкод = Выборка.Штрихкод;
			Запись.ТипШтрихкода = Выборка.ТипШтрихкода;
			Запись.ЗаказГрузоотправителя = Выборка.ЗаказГрузоотправителя;
			
			Запись.Удалить();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Ошибка = ИнформацияОбОшибке();
		ВызватьИсключение(НСтр("ru = 'Ошибка замены штрихкодов аналогов без остатка'"), , , , Ошибка);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
