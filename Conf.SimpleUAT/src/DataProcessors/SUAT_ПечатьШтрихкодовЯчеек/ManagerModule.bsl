
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Сформировать печатные формы объектов
//
// Параметры:
//  МассивОбъектов - Массив из СправочникСсылка.ШаблоныЭтикетокИЦенниковБПО - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати - СписокЗначений - значение - ссылка на объект;
//                                            представление - имя области, в которой был выведен объект (выходной параметр);
//  ПараметрыВывода - Структура - дополнительные параметры сформированных табличных документов (выходной параметр).
//
//@skip-check doc-comment-collection-item-type
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	СформироватьПечатныеФормы(МассивОбъектов, ПараметрыПечати, ОбъектыПечати, КоллекцияПечатныхФорм);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПерезаполнитьДеревоЯчеекПоПараметрамВФоне(Параметры, АдресРезультата) Экспорт
	
	ОжидаемыеТипыСвойств = Новый Структура();
	ОжидаемыеТипыСвойств.Вставить("ДеревоЯчеек", Тип("ДеревоЗначений"));
	ОжидаемыеТипыСвойств.Вставить("Склад", Тип("СправочникСсылка.Склады"));
	ОжидаемыеТипыСвойств.Вставить("Помещение", Тип("Строка"));
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"Обработки.SUAT_ПечатьШтрихкодовЯчеек.ПерезаполнитьДеревоЯчеекПоПараметрамВФоне", 
		"Параметры", Параметры, Тип("Структура"), ОжидаемыеТипыСвойств);
	
	ДеревоЯчеек = Параметры.ДеревоЯчеек;
	
	ДеревоЯчеек.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	уатСкладскиеЯчейки.Ряд КАК Ряд,
		|	уатСкладскиеЯчейки.Стеллаж КАК Стеллаж,
		|	уатСкладскиеЯчейки.Ярус КАК Ярус,
		|	уатСкладскиеЯчейки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.уатСкладскиеЯчейки КАК уатСкладскиеЯчейки
		|ГДЕ
		|	уатСкладскиеЯчейки.Владелец = &Склад
		|	И уатСкладскиеЯчейки.Помещение = &Помещение
		|ИТОГИ ПО
		|	Ряд,
		|	Стеллаж,
		|	Ярус";
	
	Запрос.УстановитьПараметр("Склад", Параметры.Склад);
	Запрос.УстановитьПараметр("Помещение", Параметры.Помещение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаРяд = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаРяд.Следующий() Цикл
			
			СтрокаДереваРяд = ДеревоЯчеек.Строки.Добавить();
			СтрокаДереваРяд.Представление = СтрШаблон(НСтр("ru = 'Ряд: %1'"), ВыборкаРяд.Ряд);
			
			ВыборкаСтеллаж = ВыборкаРяд.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаСтеллаж.Следующий() Цикл
				
				СтрокаДереваСтелаж = СтрокаДереваРяд.Строки.Добавить();
				СтрокаДереваСтелаж.Представление = СтрШаблон(НСтр("ru = 'Стеллаж: %1'"), ВыборкаСтеллаж.Стеллаж);
				
				ВыборкаЯрус = ВыборкаСтеллаж.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаЯрус.Следующий() Цикл
					
					СтрокаДереваЯрус = СтрокаДереваСтелаж.Строки.Добавить();
					СтрокаДереваЯрус.Представление = СтрШаблон(НСтр("ru = 'Ярус: %1'"), ВыборкаЯрус.Ярус);
					
					ВыборкаДетальныеЗаписи = ВыборкаЯрус.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						СтрокаДереваЯчейка = СтрокаДереваЯрус.Строки.Добавить();
						СтрокаДереваЯчейка.Представление = СтрШаблон(НСтр("ru = 'Ячейка: %1'"), ВыборкаДетальныеЗаписи.Ссылка);
						СтрокаДереваЯчейка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
						СтрокаДереваЯчейка.ЭтоСтрокаДляПечати = Истина;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДеревоЯчеек, АдресРезультата);
	
КонецПроцедуры

Процедура СформироватьПечатныеФормыШтрихкодовЯчеекВФоне(Параметры, АдресРезультата) Экспорт
	
	ОжидаемыеТипыСвойств = Новый Структура();
	ОжидаемыеТипыСвойств.Вставить("Ячейки", Тип("Массив"));
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"Обработки.SUAT_ПечатьШтрихкодовЯчеек.ПерезаполнитьДеревоЯчеекПоПараметрамВФоне", 
		"Параметры", Параметры, Тип("Структура"), ОжидаемыеТипыСвойств);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	уатСкладскиеЯчейки.Наименование КАК ЗначениеШтрихкода
		|ИЗ
		|	Справочник.уатСкладскиеЯчейки КАК уатСкладскиеЯчейки
		|ГДЕ
		|	уатСкладскиеЯчейки.Ссылка В (&Ячейки)";
	
	Запрос.УстановитьПараметр("Ячейки", Параметры.Ячейки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбщегоНазначенияКлиентСервер.Проверить(Не РезультатЗапроса.Пустой(),
		НСтр("ru = 'Отсутсвуют данные для печати'"));
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
	КонецЦикла;
	
	ПФЯчеек = Новый ТабличныйДокумент();
	ПФЯчеек.ВысотаСтраницы = 50;
	ПФЯчеек.ШиринаСтраницы = 50;
	
	ПФЯчеек.ПолеСверху = 0;
	ПФЯчеек.ПолеСлева = 5;
	ПФЯчеек.ПолеСнизу = 0;
	ПФЯчеек.ПолеСправа = 0;
	
	ПоместитьВоВременноеХранилище(ПФЯчеек, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьПечатныеФормы(МассивОбъектов, ПараметрыПечати, ОбъектыПечати, КоллекцияПечатныхФорм)
	
	Перем СообщениеОбОшибке, КаждаяЭтикеткаНаНовомЛисте;
	
	Если Не ПараметрыПечати.Свойство("КаждаяЭтикеткаНаНовомЛисте", КаждаяЭтикеткаНаНовомЛисте) Тогда
		КаждаяЭтикеткаНаНовомЛисте = Ложь;
	КонецЕсли;
	
	КоллекцияПечатныхФорм.Очистить();
	
	Разрешение = РазрешениеЭталона();
	
	СоответствиеПолейИШаблона = ПоляШаблона(ПараметрыПечати.ШаблонЭтикетки);
	
	ТаблицаДанных = ПолучитьТаблицуКПечати(ПараметрыПечати.Ячейки, СоответствиеПолейИШаблона);
	ТаблицаДанных.Колонки.Добавить("ШаблонЭтикеткиДляПечати", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенниковБПО"));
	ТаблицаДанных.ЗаполнитьЗначения(ПараметрыПечати.ШаблонЭтикетки, "ШаблонЭтикеткиДляПечати");
	
	ДанныеПечатнойФормы = ДанныеДляПечатиЭтикеток(ТаблицаДанных, ПараметрыПечати.ШаблонЭтикетки, СоответствиеПолейИШаблона);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	АвтоМасштаб = ТабличныйДокумент.АвтоМасштаб;
	ТабличныйДокумент.АвтоМасштаб = Ложь;
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир,1);
	Шаблон = ДанныеПечатнойФормы.Шаблон;
	ШаблонРеквизиты = ОбщегоНазначенияБПО.ЗначенияРеквизитовОбъекта(Шаблон, "Наименование, Макет");
	Макет = ШаблонРеквизиты.Макет.Получить();
	
	Если Не Макет = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, Макет, , "ОбластьПечати");
	КонецЕсли;
	
	Для Каждого ДанныеЭтикетки Из ДанныеПечатнойФормы.ДанныеДляПечатиЭтикеток Цикл
		
		МакетЭтикетки = ЗаполненныйТабличныйДокумент(Разрешение, ДанныеЭтикетки, СообщениеОбОшибке)
			.ПолучитьОбласть(1, 1, ДанныеЭтикетки.Высота + 1, ДанныеЭтикетки.Ширина + 1);
		
		МакетЭтикетки.Область().АвтоВысотаСтроки = Ложь;
		МакетЭтикетки.Область().ВысотаСтроки =  Разрешение.ОдинМиллиметрВысоты;
		МакетЭтикетки.Область().ШиринаКолонки = Разрешение.ОдинМиллиметрШирины;
		
		МакетЭтикетки.Область(1, 1, ДанныеЭтикетки.Высота + 1, ДанныеЭтикетки.Ширина + 1).Обвести(Линия, Линия, Линия, Линия);
		
		Для Счетчик = 1 По ДанныеЭтикетки.Количество Цикл
			
			Попытка
				МожноПрисоединить = Не КаждаяЭтикеткаНаНовомЛисте 
					И ТабличныйДокумент.ПроверитьПрисоединение(ОбщегоНазначенияБПОКлиентСервер.ЗначениеВМассиве(МакетЭтикетки));
			Исключение
				// Если принтер не установлен, или пользователь выбрал каждую этикетку отдельно печатаем все в столбец
				МожноПрисоединить = Не КаждаяЭтикеткаНаНовомЛисте;
			КонецПопытки;
			
			Если МожноПрисоединить Тогда
				ТабличныйДокумент.Присоединить(МакетЭтикетки);
			Иначе
				
				// Вызов БСП
				МодульОбщегоНазначения = ОбщегоНазначенияБПО.ОбщийМодуль("ОбщегоНазначения");
				МожноВывести = Не КаждаяЭтикеткаНаНовомЛисте 
					И МодульОбщегоНазначения.ПроверитьВыводТабличногоДокумента(
						ТабличныйДокумент, 
						ОбщегоНазначенияБПОКлиентСервер.ЗначениеВМассиве(МакетЭтикетки), 
						Ложь);
				// Конец Вызов БСП
				
				Если Не МожноВывести Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(МакетЭтикетки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Вызов БСП
	МодульУправлениеПечатью = ОбщегоНазначенияБПО.ОбщийМодуль("УправлениеПечатью");
	МодульУправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 1, ОбъектыПечати, МассивОбъектов[0]);
	// Конец Вызов БСП
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ОбщегоНазначенияБПО.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли; 
	
	ТабличныйДокумент.АвтоМасштаб = АвтоМасштаб;
	
	ИмяМакета = ШаблонРеквизиты.Наименование;
	НоваяФорма = КоллекцияПечатныхФорм.Добавить();
	НоваяФорма.ИмяМакета         = ИмяМакета;
	НоваяФорма.СинонимМакета     = ИмяМакета;
	НоваяФорма.ИмяВРЕГ           = ВРег(ИмяМакета);
	НоваяФорма.ТабличныйДокумент = ТабличныйДокумент;
	НоваяФорма.Экземпляров       = 1;
	
КонецПроцедуры

Функция РазрешениеЭталона()
	
	Разрешение = Новый Структура;
	
	Эталон = МакетЭталон();
	Рисунок = Эталон.Рисунки[0];
	
	ВысотаСтрокиВМиллиметрах = Рисунок.Верх;
	ШиринаСтолбцаВМиллиметрах = Рисунок.Лево;
	
	ВысотаСтроки	= Эталон.Область("R1").ВысотаСтроки;
	ШиринаСтолбца	= Эталон.Область("C1").ШиринаКолонки;
	
	Разрешение.Вставить("КоличествоМиллиметровВПикселеВысота", Рисунок.Высота/200);
	Разрешение.Вставить("КоличествоМиллиметровВПикселеШирина", Рисунок.Ширина/200);
	Разрешение.Вставить("ОдинМиллиметрШирины",                 ШиринаСтолбца / ШиринаСтолбцаВМиллиметрах);
	Разрешение.Вставить("ОдинМиллиметрВысоты",                 ВысотаСтроки / ВысотаСтрокиВМиллиметрах);
	
	Возврат Разрешение;
	
КонецФункции

Функция МакетЭталон()
	
	Возврат Справочники.ПодключаемоеОборудование.ПолучитьМакет("МакетДляОпределенияКоэффициентовЕдиницИзмерения");
	
КонецФункции

Функция ПоляШаблона(ШаблонПечати)
	
	СписокПолей = Новый Массив();
	
	СообщениеОбОшибке = "";
	СодержимоеXMLФайла = "";
	
	XMLОписаниеМакета = ОбщегоНазначенияБПО.ЗначениеРеквизитаОбъекта(ШаблонПечати, "XMLОписаниеМакета");
	ОборудованиеПринтерыЭтикеток.ПолучитьОписаниеМакета(XMLОписаниеМакета, СообщениеОбОшибке, СодержимоеXMLФайла);
	
	Для Каждого ОписаниеПоляXML Из СодержимоеXMLФайла.Поля Цикл
		
		ОписаниеПоля = НовыйОписаниеПоля();
		ЗаполнитьЗначенияСвойств(ОписаниеПоля, ОписаниеПоляXML);
		
		Если ОписаниеПоляXML.Свойство("Фон") Тогда
			ОписаниеПоля.ЦветФона = ОписаниеПоляXML.Фон;
		КонецЕсли;
		
		СписокПолей.Добавить(ОписаниеПоля);
		
	КонецЦикла;
	
	Возврат СписокПолей;
	
КонецФункции

// Возвращает описание поля
//
// Возвращаемое значение:
//  Структура
Функция НовыйОписаниеПоля()
	Результат = Новый Структура;
	
	Результат.Вставить("Наименование",           "");
	Результат.Вставить("Представление",          "");
	Результат.Вставить("Тип",                    "");
	Результат.Вставить("ТипЗаполнения");
	Результат.Вставить("ЗначениеПоУмолчанию");
	Результат.Вставить("Значение");
	Результат.Вставить("Верх",                   0);
	Результат.Вставить("Лево",                   0);
	Результат.Вставить("Низ",                    0);
	Результат.Вставить("Право",                  0);
	Результат.Вставить("Ориентация");
	Результат.Вставить("ИмяШрифта");
	Результат.Вставить("РазмерШрифта");
	Результат.Вставить("Жирный",                 Ложь);
	Результат.Вставить("Наклонный",              Ложь);
	Результат.Вставить("Подчеркивание",          Ложь);
	Результат.Вставить("Зачеркивание",           Ложь);
	Результат.Вставить("РамкаСлева",             Ложь);
	Результат.Вставить("РамкаСверху",            Ложь);
	Результат.Вставить("РамкаСправа",            Ложь);
	Результат.Вставить("РамкаСнизу",             Ложь);
	Результат.Вставить("ТипРамки");
	Результат.Вставить("ТолщинаРамки");
	Результат.Вставить("ТипШтрихкода");
	Результат.Вставить("РазмерШрифтаПодписи");
	Результат.Вставить("ПодписьШтрихкода");
	Результат.Вставить("КонтрольныйСимвол");
	Результат.Вставить("ПоложениеПоГоризонтали", "Left");
	Результат.Вставить("ПоложениеПоВертикали",   "Top");
	Результат.Вставить("Многострочность",        Ложь);
	Результат.Вставить("Формат"); 
	Результат.Вставить("ЦветФона");
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеДляПечатиЭтикеток(ТаблицаРезультата, Шаблон, ПоляДляЗаполнения)
	
	ЗначениеРеквизита = Неопределено;
	
	ПсевдонимыПолей = Новый Соответствие;
	ПсевдонимыПутей = Новый Соответствие;
	
	Для каждого Поле Из ПоляДляЗаполнения Цикл
		
		ЗначениеПоля = Поле.Значение;
		
		Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
			
			ПсевдонимыПолей.Вставить(Поле.Наименование, ЗначениеПоля);
			
			ПсевдонимПути = ПсевдонимыПутей[ЗначениеПоля];
			
			Если ПсевдонимПути = Неопределено Тогда
				
				ПсевдонимыПутей.Вставить(ЗначениеПоля, Поле.Наименование);
				ПсевдонимПути = Поле.Наименование;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаголовкиКолонок = Новый Соответствие;
	Для Каждого Колонка Из ТаблицаРезультата.Колонки Цикл
		ЗаголовкиКолонок.Вставить(Колонка.Заголовок, Колонка.Имя);
	КонецЦикла;
	
	Для Каждого ПсевдонимПоля Из ПсевдонимыПолей Цикл
		
		ЗначениеПоля = ПсевдонимПоля.Значение;
		
		ПсевдонимПути = ПсевдонимыПутей[ЗначениеПоля];
		Если ПсевдонимПути <> Неопределено И ЗаголовкиКолонок[ПсевдонимПути] <> Неопределено Тогда
			ПсевдонимыПолей[ПсевдонимПоля.Ключ] = ЗаголовкиКолонок[ПсевдонимПути];
		Иначе
			ПсевдонимыПолей[ПсевдонимПоля.Ключ] = "";
		КонецЕсли; 
		
	КонецЦикла;
	
	ДанныеПараметров = Новый ТаблицаЗначений;
	ДанныеПараметров.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	ДанныеПараметров.Колонки.Добавить("ЗначенияРеквизитов");
	
	Для каждого СтрокаРезультата Из ТаблицаРезультата Цикл
		
		ЗначенияРеквизитов = Новый Структура;
		Для Каждого ОписаниеПоля Из ПсевдонимыПолей Цикл
			
			Если ЗначениеЗаполнено(ОписаниеПоля.Значение) Тогда
				КлючПоля = "_" + СтрЗаменить(ОписаниеПоля.Ключ, "-", "");
				ЗначенияРеквизитов.Вставить(КлючПоля, СтрокаРезультата[ОписаниеПоля.Значение]);
			КонецЕсли;
			
		КонецЦикла; 
		
		НоваяСтрока = ДанныеПараметров.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТаблицаРезультата.Индекс(СтрокаРезультата);
		НоваяСтрока.ЗначенияРеквизитов = ЗначенияРеквизитов;
		
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура("ИдентификаторСтроки");
	ДанныеДляПечатиЭтикеток = Новый Массив;
	
	Для Каждого Товар Из ТаблицаРезультата Цикл
		
		ДанныеЭтикетки 		= НовыйДанныеЭтикетки();
		XMLОписаниеМакета  	= Товар.ШаблонЭтикеткиДляПечати.XMLОписаниеМакета;
		СообщениеОбОшибке  	= "";
		СодержимоеXMLФайла 	= "";
		
		ОборудованиеПринтерыЭтикеток.ПолучитьОписаниеМакета(XMLОписаниеМакета, СообщениеОбОшибке, СодержимоеXMLФайла);
		
		ДанныеЭтикетки.Количество 	= Товар.КоличествоЭтикетокДляПечати;
		ДанныеЭтикетки.Ширина 		= СодержимоеXMLФайла.Ширина;
		ДанныеЭтикетки.Высота 		= СодержимоеXMLФайла.Высота;
		
		Для Каждого ПолеМакета Из ПоляДляЗаполнения Цикл
			
			Если ПолеМакета.Тип = "UserData" Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора.ИдентификаторСтроки = ТаблицаРезультата.Индекс(Товар);
			НайденныеСтроки = ДанныеПараметров.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			ЗначенияРеквизитов = НайденныеСтроки[0].ЗначенияРеквизитов;
			
			ЗначенияПолей = Новый Структура;
			ЗначенияПолей.Вставить("ИмяПоля",          ПолеМакета.Наименование);
			ЗначенияПолей.Вставить("ОписаниеПоля",     ПолеМакета);
			
			КлючЗначенияРеквизита = "_"+СтрЗаменить(ПолеМакета.Наименование, "-", "");
			
			Если ПолеМакета.Тип = "Text" И ПолеМакета.ТипЗаполнения = "Constant" И
				СтрНачинаетсяС(ПолеМакета.Значение, "{{{") И 
				СтрЗаканчиваетсяНа(ПолеМакета.Значение, "}}}") Тогда
				ПолеМакета.ТипЗаполнения = "Parameter";
			КонецЕсли;
			
			Если Не (ПолеМакета.Тип = "Barcode" ИЛИ ПолеМакета.ТипЗаполнения = "Parameter") Или
				Не ЗначениеЗаполнено(ПолеМакета.Значение) Или 
				Не ЗначенияРеквизитов.Свойство(КлючЗначенияРеквизита, ЗначениеРеквизита) Тогда
				ЗначениеРеквизита = "";
			КонецЕсли;
			
			Если ПолеМакета.Тип = "Barcode" Тогда
				
				ЗначенияПолей.Вставить("Значение", ЗначениеРеквизита);
				
			ИначеЕсли ПолеМакета.ТипЗаполнения = "Parameter" Тогда
				
				Если ТипЗнч(ЗначениеРеквизита) = Тип("ХранилищеЗначения") Тогда
					
					ЗначениеРеквизита = ЗначениеРеквизита.Получить();
					
					Если ТипЗнч(ЗначениеРеквизита) = Тип("ДвоичныеДанные") Тогда
						ЗначениеРеквизита = Base64Строка(ЗначениеРеквизита);
					Иначе
						ЗначениеРеквизита = Строка(ЗначениеРеквизита);
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					ЗначенияПолей.Вставить("Значение", 
						?(ЗначениеЗаполнено(ПолеМакета.Формат), Формат(ЗначениеРеквизита, ПолеМакета.Формат), ЗначениеРеквизита));
				Иначе
					
					Если ЗначениеЗаполнено(ПолеМакета.ЗначениеПоУмолчанию) Тогда
						ЗначенияПолей.Вставить("Значение", 
							?(ЗначениеЗаполнено(ПолеМакета.Формат), Формат(ПолеМакета.ЗначениеПоУмолчанию, ПолеМакета.Формат), ПолеМакета.ЗначениеПоУмолчанию));
					Иначе
						ЗначенияПолей.Вставить("Значение", 
							?(ЗначениеЗаполнено(ПолеМакета.Формат), Формат("", ПолеМакета.Формат), ""));
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				ЗначенияПолей.Вставить("Значение", ПолеМакета.Значение);
			КонецЕсли;
			
			ДанныеЭтикетки.Поля.Добавить(ЗначенияПолей);
			
		КонецЦикла;
		
		ДанныеДляПечатиЭтикеток.Добавить(ДанныеЭтикетки);
		
	КонецЦикла; 
	
	СтруктураДанныхДляПечатныхФорм = Новый Структура;
	СтруктураДанныхДляПечатныхФорм.Вставить("ДанныеДляПечатиЭтикеток", ДанныеДляПечатиЭтикеток);
	СтруктураДанныхДляПечатныхФорм.Вставить("Шаблон", Шаблон);
	СтруктураДанныхДляПечатныхФорм.Вставить("XMLОписаниеМакета", XMLОписаниеМакета);
	
	Возврат СтруктураДанныхДляПечатныхФорм;
	
КонецФункции

// Новый данные этикетки.
// 
// Возвращаемое значение:
//  Структура - Новый данные этикетки:
//   * Количество - Число -
//   * Поля - Массив Из Строка -
//   * Ширина - Число - 
//   * Высота - Число.
//
Функция НовыйДанныеЭтикетки() Экспорт
	
	ДанныеЭтикетки = Новый Структура;
	ДанныеЭтикетки.Вставить("Количество", 1);
	ДанныеЭтикетки.Вставить("Поля", Новый Массив);
	ДанныеЭтикетки.Вставить("Ширина");
	ДанныеЭтикетки.Вставить("Высота");
	
	//@skip-check constructor-function-return-section
	Возврат ДанныеЭтикетки;
	
КонецФункции

Функция ЗаполненныйТабличныйДокумент(Разрешение, ДанныеЭтикетки, СообщениеОбОшибке)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ДанныеЭтикетки.Количество() > 0 Тогда
		
		ЗначенияПолей = Новый Структура;
		
		Для Каждого Поле Из ДанныеЭтикетки.Поля Цикл
			
			ИмяПоля      = "П"+СтрЗаменить(Поле.ИмяПоля, "-", "");
			ОписаниеПоля = Поле.ОписаниеПоля;
			ЗначениеПоля = Поле.Значение;
			
			Если ОписаниеПоля.Тип = "UserData" Тогда
				Продолжить;
			КонецЕсли;
			
			ОбластьТабличногоДокумента = СохранитьОформлениеПоля(ИмяПоля, ОписаниеПоля, ТабличныйДокумент);
			
			Если ОписаниеПоля.Тип = "Barcode" Тогда
				
				Если Разрешение.КоличествоМиллиметровВПикселеШирина = 0 Тогда
					ШиринаОбласти = 0;
				Иначе
					ШиринаОбласти = (ОписаниеПоля.Право - ОписаниеПоля.Лево) / Разрешение.КоличествоМиллиметровВПикселеШирина;
				КонецЕсли;
				
				Если Разрешение.КоличествоМиллиметровВПикселеВысота = 0 Тогда
					ВысотаОбласти = 0;
				Иначе
					ВысотаОбласти = (ОписаниеПоля.Низ - ОписаниеПоля.Верх) / Разрешение.КоличествоМиллиметровВПикселеВысота;
				КонецЕсли;
				
				СтрокаШтрихкода = СокрЛП(Строка(ЗначениеПоля));
				
				ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();      
				ПараметрыШтрихкода.Ширина = ШиринаОбласти;
				ПараметрыШтрихкода.Высота = ВысотаОбласти;
				ПараметрыШтрихкода.Штрихкод = СтрокаШтрихкода;
				ПараметрыШтрихкода.ТипКода  = ТипКодаШтрихПоИмени(ОписаниеПоля.ТипШтрихкода);
				ПараметрыШтрихкода.ОтображатьТекст = (ОписаниеПоля.ПодписьШтрихкода = "true"); 
				ПараметрыШтрихкода.Масштабировать = Истина;
				ПараметрыШтрихкода.ПрозрачныйФон = Истина;
				
				Если ОписаниеПоля.ПодписьШтрихкода = "true" И ЗначениеЗаполнено(ОписаниеПоля.РазмерШрифтаПодписи) Тогда
					ПараметрыШтрихкода.РазмерШрифта = ОписаниеПоля.РазмерШрифтаПодписи;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ОписаниеПоля.Ориентация) Тогда
					ПараметрыШтрихкода.УголПоворота = ОписаниеПоля.Ориентация; // Одно из следующих значений: 0, 90, 180, 270.
				КонецЕсли;
				
				Если ОписаниеПоля.Свойство("УровеньКоррекцииQR") Тогда
					ПараметрыШтрихкода.УровеньКоррекцииQR = ОписаниеПоля.УровеньКоррекцииQR;
				КонецЕсли;  
				
				Попытка     
					РезультатФормированияШтрихкода = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
					ОбластьТабличногоДокумента.Картинка = РезультатФормированияШтрихкода.Картинка;
				Исключение
					ТекстОшибки = НСтр("ru = 'Не удалось сформировать штрихкод.
					|%1'");
					ОписаниеОшибки = СтрШаблон(ТекстОшибки, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ОбщегоНазначенияБПО.ЗаписатьОшибкуВЖурналРегистрации(
							НСтр("ru = 'Печать штрихкодов ячеек'", ОбщегоНазначенияБПО.КодОсновногоЯзыка()), 
							ОписаниеОшибки, ,
							Метаданные.Обработки.SUAT_ПечатьШтрихкодовЯчеек);
					
					СообщениеОбОшибке = НСтр("ru = 'Не удалось сформировать штрихкод'");
					
				КонецПопытки; 
				
			ИначеЕсли ОписаниеПоля.Тип = "Image" Тогда 
				
				ДвоичныеДанные = Base64Значение(ЗначениеПоля);
				ОбластьТабличногоДокумента.Картинка = Новый Картинка(ДвоичныеДанные, Истина);
				
			ИначеЕсли ОписаниеПоля.ТипЗаполнения = "Parameter" Тогда
				
				Если ТипЗнч(ЗначениеПоля) = Тип("ХранилищеЗначения") Тогда
					
					ЗначениеПоля = ЗначениеПоля.Получить();
					
					Если ТипЗнч(ЗначениеПоля) = Тип("ДвоичныеДанные") Тогда
						ЗначениеПоля = Base64Строка(ЗначениеПоля);
					Иначе
						ЗначениеПоля = Строка(ЗначениеПоля);
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
					ЗначенияПолей.Вставить(ИмяПоля, 
						?(ЗначениеЗаполнено(ОписаниеПоля.Формат), Формат(ЗначениеПоля, ОписаниеПоля.Формат), ЗначениеПоля));
				Иначе
					
					Если ЗначениеЗаполнено(ОписаниеПоля.ЗначениеПоУмолчанию) Тогда
						ЗначенияПолей.Вставить(ИмяПоля, 
							?(ЗначениеЗаполнено(ОписаниеПоля.Формат), Формат(ОписаниеПоля.ЗначениеПоУмолчанию, ОписаниеПоля.Формат), ОписаниеПоля.ЗначениеПоУмолчанию));
					Иначе
						ЗначенияПолей.Вставить(ИмяПоля, 
							?(ЗначениеЗаполнено(ОписаниеПоля.Формат), Формат("", ОписаниеПоля.Формат), ""));
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				ЗначенияПолей.Вставить(ИмяПоля, ОписаниеПоля.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		ТабличныйДокумент.Параметры.Заполнить(ЗначенияПолей);
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СохранитьОформлениеПоля(ИмяПоля, ОписаниеПоля, ТабличныйДокумент) Экспорт
	
	Если ОписаниеПоля.Тип = "Text" Или ОписаниеПоля.Тип = "Image" Тогда
		
		Область = ТабличныйДокумент.Область(ОписаниеПоля.Верх+1,ОписаниеПоля.Лево+1, ОписаниеПоля.Низ+1, ОписаниеПоля.Право+1);
		Область.Объединить();
		
		Область.Имя = ИмяПоля;
		
		Если ОписаниеПоля.ТипЗаполнения = "Constant" И НЕ ОписаниеПоля.Тип = "Image" Тогда
			Область.Заполнение=ТипЗаполненияОбластиТабличногоДокумента.Текст;
			Область.Текст = ОписаниеПоля.Значение;
		Иначе
			Область.Заполнение=ТипЗаполненияОбластиТабличногоДокумента.Параметр;
			Область.Параметр = ИмяПоля;
		КонецЕсли;
		
		Если ОписаниеПоля.Многострочность Тогда
			Область.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		Иначе
			Область.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
		КонецЕсли;
		
		Область.ОриентацияТекста = ОписаниеПоля.Ориентация;
		
		Если ОписаниеПоля.ПоложениеПоГоризонтали = "Left" Тогда
			Область.ГоризонтальноеПоложение=ГоризонтальноеПоложение.Лево;
		ИначеЕсли ОписаниеПоля.ПоложениеПоГоризонтали = "Center" Тогда
			Область.ГоризонтальноеПоложение=ГоризонтальноеПоложение.Центр;
		ИначеЕсли ОписаниеПоля.ПоложениеПоГоризонтали = "Right" Тогда
			Область.ГоризонтальноеПоложение=ГоризонтальноеПоложение.Право;
		Иначе
			Область.ГоризонтальноеПоложение=ГоризонтальноеПоложение.Лево;
		КонецЕсли;
		
		Если ОписаниеПоля.ПоложениеПоВертикали = "Top" Тогда
			Область.ВертикальноеПоложение=ВертикальноеПоложение.Верх;
		ИначеЕсли ОписаниеПоля.ПоложениеПоВертикали = "Center" Тогда
			Область.ВертикальноеПоложение=ВертикальноеПоложение.Центр;
		ИначеЕсли ОписаниеПоля.ПоложениеПоВертикали = "Bottom" Тогда
			Область.ВертикальноеПоложение=ВертикальноеПоложение.Низ;
		Иначе
			Область.ВертикальноеПоложение=ВертикальноеПоложение.Верх;
		КонецЕсли;
		
		//@skip-check new-font
		Область.Шрифт = Новый Шрифт(ОписаниеПоля.ИмяШрифта, 
			ОписаниеПоля.РазмерШрифта, ОписаниеПоля.Жирный, 
			ОписаниеПоля.Наклонный, 
			ОписаниеПоля.Подчеркивание, 
			ОписаниеПоля.Зачеркивание);
		
		Если ОписаниеПоля.ЦветФона <> Неопределено Тогда
			Область.ЦветФона = ОписаниеПоля.ЦветФона;
		КонецЕсли;
		
		Если ОписаниеПоля.ТипРамки = "Solid" Тогда
			ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Сплошная;
		ИначеЕсли ОписаниеПоля.ТипРамки = "Double" Тогда
			ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Двойная;
		ИначеЕсли ОписаниеПоля.ТипРамки = "Dotted" Тогда
			ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная;
		ИначеЕсли ОписаниеПоля.ТипРамки = "Dashed" Тогда
			ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.БольшойПунктир;
		Иначе
			ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.НетЛинии;
		КонецЕсли;
		
		Рамка = Новый Линия(ТипЛинии, ОписаниеПоля.ТолщинаРамки);
		
		Если ОписаниеПоля.РамкаСлева Тогда
			Область.ГраницаСлева=Рамка;
		Иначе
			Область.ГраницаСлева=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
		КонецЕсли;
		
		Если ОписаниеПоля.РамкаСправа Тогда
			Область.ГраницаСправа=Рамка;
		Иначе
			Область.ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
		КонецЕсли;
		
		Если ОписаниеПоля.РамкаСверху Тогда
			Область.ГраницаСверху=Рамка;
		Иначе
			Область.ГраницаСверху=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
		КонецЕсли;
		
		Если ОписаниеПоля.РамкаСнизу Тогда
			Область.ГраницаСнизу=Рамка;
		Иначе
			Область.ГраницаСнизу=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
		КонецЕсли;
		
	ИначеЕсли ОписаниеПоля.Тип = "Barcode" Тогда
		
		РасположениеКартинки = ТабличныйДокумент.Область(ОписаниеПоля.Верх + 1, 
			ОписаниеПоля.Лево + 1, ОписаниеПоля.Низ+1, ОписаниеПоля.Право+1);
		
		Область = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		
		Область.Расположить(РасположениеКартинки);
		Область.РазмерКартинки = РазмерКартинки.Пропорционально;
		Область.ГраницаСлева   = ОписаниеПоля.РамкаСлева;
		Область.ГраницаСправа  = ОписаниеПоля.РамкаСправа;
		Область.ГраницаСверху  = ОписаниеПоля.РамкаСверху;
		Область.ГраницаСнизу   = ОписаниеПоля.РамкаСнизу;
		
	КонецЕсли;
	
	Возврат Область;
КонецФункции

Функция ТипКодаШтрихПоИмени(ТипКодаСтрокой) 
	
	Если ТипКодаСтрокой = "EAN8" Тогда
		ТипКода = 0;
	ИначеЕсли ТипКодаСтрокой = "EAN13" Тогда
		ТипКода = 1;
	ИначеЕсли ТипКодаСтрокой = "EAN128" Тогда
		ТипКода = 2;
	ИначеЕсли ТипКодаСтрокой = "CODE39" Тогда
		ТипКода = 3;
	ИначеЕсли ТипКодаСтрокой = "CODE128" Тогда
		ТипКода = 4;
	ИначеЕсли ТипКодаСтрокой = "ITF14" Тогда
		ТипКода = 11;
	ИначеЕсли ТипКодаСтрокой = "EAN13Addon2" Тогда
		ТипКода = 14;
	ИначеЕсли ТипКодаСтрокой = "EAN13Addon5" Тогда
		ТипКода = 15;
	ИначеЕсли ТипКодаСтрокой = "QR" ИЛИ ТипКодаСтрокой = "QRCode" Тогда
		ТипКода = 16;
	ИначеЕсли ТипКодаСтрокой = "GS1DataBarExpandedStacked" Тогда
		ТипКода = 17;
	ИначеЕсли ТипКодаСтрокой = "DataMatrix" Тогда
		ТипКода = 18;
	ИначеЕсли ТипКодаСтрокой = "GS1-DataMatrix" Тогда
		ТипКода = 24;      
	Иначе
		ТипКода = 99;
	КонецЕсли;
	
	Возврат ТипКода; 
	
КонецФункции

Функция ПолучитьТаблицуКПечати(Ячейки, СоответствиеПолейИШаблона)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Схема = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = Схема.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = Схема.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
	НаборДанных.Запрос = 
		"ВЫБРАТЬ 
		|	Наименование КАК Штрихкод,
		|	1 КАК КоличествоЭтикетокДляПечати,
		|	* 
		|ИЗ 
		|	Справочник.уатСкладскиеЯчейки 
		|ГДЕ 
		|	Ссылка В (&Ячейки)";
	НаборДанных.Имя = "НаборДанных1";
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных();
	URLСхемы = ПоместитьВоВременноеХранилище(Схема, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(Компоновщик);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Компоновщик, "Ячейки", Ячейки);
	
	Для Каждого СоответствиеПоляИШаблона Из СоответствиеПолейИШаблона Цикл
		
		ЗначениеСоответствияПоля = СоответствиеПоляИШаблона.Значение;
		
		Если СтрНачинаетсяС(СоответствиеПоляИШаблона.Значение, "{{{") И 
			СтрЗаканчиваетсяНа(СоответствиеПоляИШаблона.Значение, "}}}") Тогда
			ЗначениеСоответствияПоля = СтрЗаменить(ЗначениеСоответствияПоля, "{{{", "");
			ЗначениеСоответствияПоля = СтрЗаменить(ЗначениеСоответствияПоля, "}}}", "");
		КонецЕсли;
		
		Если ЗначениеСоответствияПоля = "КоличествоЭтикетокДляПечати" Тогда
			Продолжить;
		КонецЕсли;
		
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Компоновщик, ЗначениеСоответствияПоля, СоответствиеПоляИШаблона.Наименование);
		
	КонецЦикла;
	
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Компоновщик, "КоличествоЭтикетокДляПечати");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Компоновщик.ПолучитьНастройки(),,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Ложь);
	
	РезультирующаяТаблица = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультирующаяТаблица);	
	РезультирующаяТаблица = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат РезультирующаяТаблица;
	
КонецФункции

#КонецОбласти

#КонецЕсли
